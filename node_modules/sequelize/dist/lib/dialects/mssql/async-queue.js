"use strict";
const BaseError = require("../../errors/base-error");
const ConnectionError = require("../../errors/connection-error");
class AsyncQueueError extends BaseError {
  constructor(message) {
    super(message);
    this.name = "SequelizeAsyncQueueError";
  }
}
exports.AsyncQueueError = AsyncQueueError;
class AsyncQueue {
  constructor() {
    this.previous = Promise.resolve();
    this.closed = false;
    this.rejectCurrent = () => {
    };
  }
  close() {
    this.closed = true;
    this.rejectCurrent(new ConnectionError(new AsyncQueueError("the connection was closed before this query could finish executing")));
  }
  enqueue(asyncFunction) {
    return new Promise((resolve, reject) => {
      this.previous = this.previous.then(() => {
        this.rejectCurrent = reject;
        if (this.closed) {
          return reject(new ConnectionError(new AsyncQueueError("the connection was closed before this query could be executed")));
        }
        return asyncFunction().then(resolve, reject);
      });
    });
  }
}
exports.default = AsyncQueue;
//# sourceMappingURL=async-queue.js.map
