{
  "version": 3,
  "sources": ["../../../../lib/dialects/mssql/async-queue.js"],
  "sourcesContent": ["'use strict';\n\nconst BaseError = require('../../errors/base-error');\nconst ConnectionError = require('../../errors/connection-error');\n\n/**\n * Thrown when a connection to a database is closed while an operation is in progress\n */\nclass AsyncQueueError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeAsyncQueueError';\n  }\n}\n\nexports.AsyncQueueError = AsyncQueueError;\n\nclass AsyncQueue {\n  constructor() {\n    this.previous = Promise.resolve();\n    this.closed = false;\n    this.rejectCurrent = () => {};\n  }\n  close() {\n    this.closed = true;\n    this.rejectCurrent(new ConnectionError(new AsyncQueueError('the connection was closed before this query could finish executing')));\n  }\n  enqueue(asyncFunction) {\n    // This outer promise might seems superflous since down below we return asyncFunction().then(resolve, reject).\n    // However, this ensures that this.previous will never be a rejected promise so the queue will\n    // always keep going, while still communicating rejection from asyncFunction to the user.\n    return new Promise((resolve, reject) => {\n      this.previous = this.previous.then(\n        () => {\n          this.rejectCurrent = reject;\n          if (this.closed) {\n            return reject(new ConnectionError(new AsyncQueueError('the connection was closed before this query could be executed')));\n          }\n          return asyncFunction().then(resolve, reject);\n        }\n      );\n    });\n  }\n}\n\nexports.default = AsyncQueue;\n"],
  "mappings": ";AAEA,MAAM,YAAY,QAAQ;AAC1B,MAAM,kBAAkB,QAAQ;AAKhC,8BAA8B,UAAU;AAAA,EACtC,YAAY,SAAS;AACnB,UAAM;AACN,SAAK,OAAO;AAAA;AAAA;AAIhB,QAAQ,kBAAkB;AAE1B,iBAAiB;AAAA,EACf,cAAc;AACZ,SAAK,WAAW,QAAQ;AACxB,SAAK,SAAS;AACd,SAAK,gBAAgB,MAAM;AAAA;AAAA;AAAA,EAE7B,QAAQ;AACN,SAAK,SAAS;AACd,SAAK,cAAc,IAAI,gBAAgB,IAAI,gBAAgB;AAAA;AAAA,EAE7D,QAAQ,eAAe;AAIrB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,WAAW,KAAK,SAAS,KAC5B,MAAM;AACJ,aAAK,gBAAgB;AACrB,YAAI,KAAK,QAAQ;AACf,iBAAO,OAAO,IAAI,gBAAgB,IAAI,gBAAgB;AAAA;AAExD,eAAO,gBAAgB,KAAK,SAAS;AAAA;AAAA;AAAA;AAAA;AAO/C,QAAQ,UAAU;",
  "names": []
}
