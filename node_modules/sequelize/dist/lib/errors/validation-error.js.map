{
  "version": 3,
  "sources": ["../../../lib/errors/validation-error.js"],
  "sourcesContent": ["'use strict';\n\nconst BaseError = require('./base-error');\n\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param {string} message Error message\n * @param {Array} [errors] Array of ValidationErrorItem objects describing the validation errors\n *\n * @property errors {ValidationErrorItems[]}\n */\nclass ValidationError extends BaseError {\n  constructor(message, errors, options) {\n    super(message);\n    this.name = 'SequelizeValidationError';\n    this.message = 'Validation Error';\n    /**\n     *\n     * @type {ValidationErrorItem[]}\n     */\n    this.errors = errors || [];\n\n    // Use provided error message if available...\n    if (message) {\n      this.message = message;\n\n      // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors.map(err => `${err.type || err.origin}: ${err.message}`).join(',\\n');\n    }\n\n    // Allow overriding the stack if the original stacktrace is uninformative\n    if (options && options.stack) {\n      this.stack = options.stack;\n    }\n  }\n\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param {string} path The path to be checked for error items\n   *\n   * @returns {Array<ValidationErrorItem>} Validation error items for the specified path\n   */\n  get(path) {\n    return this.errors.reduce((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n      return reduced;\n    }, []);\n  }\n}\n\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n */\nclass ValidationErrorItem {\n  /**\n   * Creates a new ValidationError item. Instances of this class are included in the `ValidationError.errors` property.\n   *\n   * @param {string} [message] An error message\n   * @param {string} [type] The type/origin of the validation error\n   * @param {string} [path] The field that triggered the validation error\n   * @param {string} [value] The value that generated the error\n   * @param {Model} [instance] the DAO instance that caused the validation error\n   * @param {string} [validatorKey] a validation \"key\", used for identification\n   * @param {string} [fnName] property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   * @param {Array} [fnArgs] parameters used with the BUILT-IN validator function, if applicable\n   */\n  constructor(message, type, path, value, instance, validatorKey, fnName, fnArgs) {\n    /**\n     * An error message\n     *\n     * @type {string} message\n     */\n    this.message = message || '';\n\n    /**\n     * The type/origin of the validation error\n     *\n     * @type {string | null}\n     */\n    this.type = null;\n\n    /**\n     * The field that triggered the validation error\n     *\n     * @type {string | null}\n     */\n    this.path = path || null;\n\n    /**\n     * The value that generated the error\n     *\n     * @type {string | null}\n     */\n    this.value = value !== undefined ? value : null;\n\n    this.origin = null;\n\n    /**\n     * The DAO instance that caused the validation error\n     *\n     * @type {Model | null}\n     */\n    this.instance = instance || null;\n\n    /**\n     * A validation \"key\", used for identification\n     *\n     * @type {string | null}\n     */\n    this.validatorKey = validatorKey || null;\n\n    /**\n     * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n     *\n     * @type {string | null}\n     */\n    this.validatorName = fnName || null;\n\n    /**\n     * Parameters used with the BUILT-IN validator function, if applicable\n     *\n     * @type {Array}\n     */\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (ValidationErrorItem.Origins[ type ]) {\n        this.origin = type;\n      } else {\n        const lowercaseType = `${type}`.toLowerCase().trim();\n        const realType = ValidationErrorItem.TypeStringMap[ lowercaseType ];\n\n        if (realType && ValidationErrorItem.Origins[ realType ]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n\n    // This doesn't need captureStackTrace because it's not a subclass of Error\n  }\n\n  /**\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\n   *\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\n   *\n   * @param   {boolean} [useTypeAsNS=true]      controls whether the returned value is \"namespace\",\n   *                                            this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @param   {string}  [NSSeparator='.']       a separator string for concatenating the namespace, must be not be empty,\n   *                                            defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\n   * @throws  {Error}                           thrown if NSSeparator is found to be invalid.\n   * @returns  {string}\n   *\n   * @private\n   */\n  getValidatorKey(useTypeAsNS, NSSeparator) {\n    const useTANS = useTypeAsNS === undefined || !!useTypeAsNS;\n    const NSSep = NSSeparator === undefined ? '.' : NSSeparator;\n\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItem.Origins[ type ];\n\n    if (useNS && (typeof NSSep !== 'string' || !NSSep.length)) {\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\n    }\n\n    if (!(typeof key === 'string' && key.length)) {\n      return '';\n    }\n\n    return (useNS ? [type, key].join(NSSep) : key).toLowerCase().trim();\n  }\n}\n\n/**\n * An enum that defines valid ValidationErrorItem `origin` values\n *\n * @type {object}\n * @property CORE       {string}  specifies errors that originate from the sequelize \"core\"\n * @property DB         {string}  specifies validation errors that originate from the storage engine\n * @property FUNCTION   {string}  specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\n */\nValidationErrorItem.Origins = {\n  CORE: 'CORE',\n  DB: 'DB',\n  FUNCTION: 'FUNCTION'\n};\n\n/**\n * An object that is used internally by the `ValidationErrorItem` class\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\n * our new `origin` values.\n *\n * @type {object}\n */\nValidationErrorItem.TypeStringMap = {\n  'notnull violation': 'CORE',\n  'string violation': 'CORE',\n  'unique violation': 'DB',\n  'validation error': 'FUNCTION'\n};\n\nmodule.exports = ValidationError;\nmodule.exports.ValidationErrorItem = ValidationErrorItem;\n"],
  "mappings": ";AAEA,MAAM,YAAY,QAAQ;AAW1B,8BAA8B,UAAU;AAAA,EACtC,YAAY,SAAS,QAAQ,SAAS;AACpC,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,UAAU;AAKf,SAAK,SAAS,UAAU;AAGxB,QAAI,SAAS;AACX,WAAK,UAAU;AAAA,eAGN,KAAK,OAAO,SAAS,KAAK,KAAK,OAAO,GAAG,SAAS;AAC3D,WAAK,UAAU,KAAK,OAAO,IAAI,SAAO,GAAG,IAAI,QAAQ,IAAI,WAAW,IAAI,WAAW,KAAK;AAAA;AAI1F,QAAI,WAAW,QAAQ,OAAO;AAC5B,WAAK,QAAQ,QAAQ;AAAA;AAAA;AAAA,EAWzB,IAAI,MAAM;AACR,WAAO,KAAK,OAAO,OAAO,CAAC,SAAS,UAAU;AAC5C,UAAI,MAAM,SAAS,MAAM;AACvB,gBAAQ,KAAK;AAAA;AAEf,aAAO;AAAA,OACN;AAAA;AAAA;AAQP,0BAA0B;AAAA,EAaxB,YAAY,SAAS,MAAM,MAAM,OAAO,UAAU,cAAc,QAAQ,QAAQ;AAM9E,SAAK,UAAU,WAAW;AAO1B,SAAK,OAAO;AAOZ,SAAK,OAAO,QAAQ;AAOpB,SAAK,QAAQ,UAAU,SAAY,QAAQ;AAE3C,SAAK,SAAS;AAOd,SAAK,WAAW,YAAY;AAO5B,SAAK,eAAe,gBAAgB;AAOpC,SAAK,gBAAgB,UAAU;AAO/B,SAAK,gBAAgB,UAAU;AAE/B,QAAI,MAAM;AACR,UAAI,oBAAoB,QAAS,OAAQ;AACvC,aAAK,SAAS;AAAA,aACT;AACL,cAAM,gBAAgB,GAAG,OAAO,cAAc;AAC9C,cAAM,WAAW,oBAAoB,cAAe;AAEpD,YAAI,YAAY,oBAAoB,QAAS,WAAY;AACvD,eAAK,SAAS;AACd,eAAK,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBpB,gBAAgB,aAAa,aAAa;AACxC,UAAM,UAAU,gBAAgB,UAAa,CAAC,CAAC;AAC/C,UAAM,QAAQ,gBAAgB,SAAY,MAAM;AAEhD,UAAM,OAAO,KAAK;AAClB,UAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,UAAM,QAAQ,WAAW,QAAQ,oBAAoB,QAAS;AAE9D,QAAI,SAAU,QAAO,UAAU,YAAY,CAAC,MAAM,SAAS;AACzD,YAAM,IAAI,MAAM;AAAA;AAGlB,QAAI,CAAE,QAAO,QAAQ,YAAY,IAAI,SAAS;AAC5C,aAAO;AAAA;AAGT,WAAQ,SAAQ,CAAC,MAAM,KAAK,KAAK,SAAS,KAAK,cAAc;AAAA;AAAA;AAYjE,oBAAoB,UAAU;AAAA,EAC5B,MAAM;AAAA,EACN,IAAI;AAAA,EACJ,UAAU;AAAA;AAUZ,oBAAoB,gBAAgB;AAAA,EAClC,qBAAqB;AAAA,EACrB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA;AAGtB,OAAO,UAAU;AACjB,OAAO,QAAQ,sBAAsB;",
  "names": []
}
